{
	"info": {
		"_postman_id": "967c6515-9dd3-4a96-b5e0-e5d39e223fd5",
		"name": "Swagger Petstore",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22773657"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) - Cadastro PET\", function () {",
									"    var data = JSON.parse(request.data);",
									"    ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json()).to.have.property(\"name\", data.name);",
									"    pm.expect(pm.response.json()).to.have.property(\"status\", pm.collectionVariables.get(\"statusPet\"));",
									"    pm.expect(pm.response.json()).to.have.property(\"id\", pm.collectionVariables.get(\"idPet\"));",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) - Cadastro PET\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaNewPet\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 409 (Conflito) -- Cadastro PET\", function () {",
									"    pm.sendRequest(pm.collectionVariables.get(\"postDuplicadoNewPet\"), (err, res) => {",
									"",
									"        let count = 0;",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 409);}catch(e){pm.test(\"Verifica Status Code 409 (Conflito) -- Cadastro PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bad Request) -- ID Inválido -- Cadastro PET Errado\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postIDInvalidoNewPet\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bad Request) -- ID Inválido -- Cadastro PET Errado\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem Body -- Cadastro PET\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postBodyVazioNewPet\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem Body -- Cadastro PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Cadastro PET\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postVALIDONewPet_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Cadastro PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const idPet = Math.floor((Math.random() * 1000) + 1);",
									"pm.collectionVariables.set(\"idPet\", idPet);",
									"",
									"const statusPet = [\"available\", \"pending\", \"sold\"];",
									"pm.collectionVariables.set(\"statusPet\", statusPet[Math.floor(Math.random() * statusPet.length)]);",
									"",
									"const postDuplicadoNewPet = {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"                {",
									"            \"id\": pm.collectionVariables.get(\"idPet\"),",
									"            \"category\": {",
									"                \"id\": -28597499,",
									"                \"name\": \"qui in\"",
									"            },",
									"            \"name\": \"doggie\",",
									"            \"photoUrls\": [",
									"                \"dolore eu\",",
									"                \"Ut exercitation\"",
									"            ],",
									"            \"tags\": [",
									"            {",
									"            \"id\": 8256603,",
									"            \"name\": \"sunt esse\"",
									"            },",
									"            {",
									"            \"id\": 89109961,",
									"            \"name\": \"aute proident non minim sed\"",
									"            }",
									"            ],",
									"            \"status\": pm.collectionVariables.get(\"statusPet\")",
									"                })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"postDuplicadoNewPet\", postDuplicadoNewPet);",
									"",
									"const postIDInvalidoNewPet = {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"                {",
									"            \"id\": \"idpet\",",
									"            \"category\": {",
									"                \"id\": -28597499,",
									"                \"name\": \"qui in\"",
									"            },",
									"            \"name\": \"doggie\",",
									"            \"photoUrls\": [",
									"                \"dolore eu\",",
									"                \"Ut exercitation\"",
									"            ],",
									"            \"tags\": [",
									"            {",
									"            \"id\": 8256603,",
									"            \"name\": \"sunt esse\"",
									"            },",
									"            {",
									"            \"id\": 89109961,",
									"            \"name\": \"aute proident non minim sed\"",
									"            }",
									"            ],",
									"            \"status\": pm.collectionVariables.get(\"statusPet\")",
									"                })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"postIDInvalidoNewPet\", postIDInvalidoNewPet);",
									"",
									"const postBodyVazioNewPet = {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"postBodyVazioNewPet\", postBodyVazioNewPet);",
									"",
									"const jsonSchemaNewPet = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"category\",",
									"        \"name\",",
									"        \"photoUrls\",",
									"        \"tags\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The id Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"category\": {",
									"            \"type\": \"object\",",
									"            \"default\": {},",
									"            \"title\": \"The category Schema\",",
									"            \"required\": [",
									"                \"id\",",
									"                \"name\"",
									"            ],",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"type\": \"integer\",",
									"                    \"default\": 0,",
									"                    \"title\": \"The id Schema\",",
									"                    \"examples\": [",
									"                        0",
									"                    ]",
									"                },",
									"                \"name\": {",
									"                    \"type\": \"string\",",
									"                    \"default\": \"\",",
									"                    \"title\": \"The name Schema\",",
									"                    \"examples\": [",
									"                        \"string\"",
									"                    ]",
									"                }",
									"            },",
									"            \"examples\": [{",
									"                \"id\": 0,",
									"                \"name\": \"string\"",
									"            }]",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The name Schema\",",
									"            \"examples\": [",
									"                \"doggie\"",
									"            ]",
									"        },",
									"        \"photoUrls\": {",
									"            \"type\": \"array\",",
									"            \"default\": [],",
									"            \"title\": \"The photoUrls Schema\",",
									"            \"items\": {",
									"                \"type\": \"string\",",
									"                \"default\": \"\",",
									"                \"title\": \"A Schema\",",
									"                \"examples\": [",
									"                    \"string\"",
									"                ]",
									"            },",
									"            \"examples\": [",
									"                [",
									"                    \"string\"]",
									"            ]",
									"        },",
									"        \"tags\": {",
									"            \"type\": \"array\",",
									"            \"default\": [],",
									"            \"title\": \"The tags Schema\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"default\": {},",
									"                \"title\": \"A Schema\",",
									"                \"required\": [",
									"                    \"id\",",
									"                    \"name\"",
									"                ],",
									"                \"properties\": {",
									"                    \"id\": {",
									"                        \"type\": \"integer\",",
									"                        \"default\": 0,",
									"                        \"title\": \"The id Schema\",",
									"                        \"examples\": [",
									"                            0",
									"                        ]",
									"                    },",
									"                    \"name\": {",
									"                        \"type\": \"string\",",
									"                        \"default\": \"\",",
									"                        \"title\": \"The name Schema\",",
									"                        \"examples\": [",
									"                            \"string\"",
									"                        ]",
									"                    }",
									"                },",
									"                \"examples\": [{",
									"                    \"id\": 0,",
									"                    \"name\": \"string\"",
									"                }]",
									"            },",
									"            \"examples\": [",
									"                [{",
									"                    \"id\": 0,",
									"                    \"name\": \"string\"",
									"                }]",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The status Schema\",",
									"            \"examples\": [",
									"                \"available\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"id\": 0,",
									"        \"category\": {",
									"            \"id\": 0,",
									"            \"name\": \"string\"",
									"        },",
									"        \"name\": \"doggie\",",
									"        \"photoUrls\": [",
									"            \"string\"",
									"        ],",
									"        \"tags\": [{",
									"            \"id\": 0,",
									"            \"name\": \"string\"",
									"        }],",
									"        \"status\": \"available\"",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaNewPet\", jsonSchemaNewPet);",
									"",
									"const METHOD_INV = [\"PATCH\", \"DELETE\", \"GET\"];",
									"const postVALIDONewPet_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"                {",
									"            \"id\": idPet,",
									"            \"category\": {",
									"                \"id\": -28597499,",
									"                \"name\": \"qui in\"",
									"            },",
									"            \"name\": \"doggie\",",
									"            \"photoUrls\": [",
									"                \"dolore eu\",",
									"                \"Ut exercitation\"",
									"            ],",
									"            \"tags\": [",
									"            {",
									"            \"id\": 8256603,",
									"            \"name\": \"sunt esse\"",
									"            },",
									"            {",
									"            \"id\": 89109961,",
									"            \"name\": \"aute proident non minim sed\"",
									"            }",
									"            ],",
									"            \"status\": pm.collectionVariables.get(\"statusPet\")",
									"                })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"postVALIDONewPet_MethodRandom\", postVALIDONewPet_MethodRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"dolore eu\",\n    \"Ut exercitation\"\n  ],\n  \"id\": {{idPet}},\n  \"category\": {\n    \"id\": -28597499,\n    \"name\": \"qui in\"\n  },\n  \"tags\": [\n    {\n      \"id\": 8256603,\n      \"name\": \"sunt esse\"\n    },\n    {\n      \"id\": 89109961,\n      \"name\": \"aute proident non minim sed\"\n    }\n  ],\n  \"status\": \"{{statusPet}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Updates a pet in the store with form data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Atualização PET Store\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(response).to.have.property(\"message\", JSON.stringify(pm.collectionVariables.get(\"idPet\")));",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Atualização PET Store\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaUpdateNewPetStore\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- ID PET Inexistente -- Atualização PET Store\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"atualizaIDPetInexistente\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- ID PET Inexistente -- Atualização PET Store\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Atualização PET Store\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"atualizaIDPetValido_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Atualização PET Store\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const atualizaIDPetInexistente= {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet\"+\":-1\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"atualizaIDPetInexistente\", atualizaIDPetInexistente);",
									"",
									"const jsonSchemaUpdateNewPetStore = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The code Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The type Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The message Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"code\": 0,",
									"        \"type\": \"string\",",
									"        \"message\": \"string\"",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaUpdateNewPetStore\", jsonSchemaUpdateNewPetStore);",
									"",
									"const METHOD_INV = [\"PATCH\", \"PUT\"];",
									"const atualizaIDPetValido_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet\"+JSON.stringify(pm.collectionVariables.get(\"idPet\")),",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"atualizaIDPetValido_MethodRandom\", atualizaIDPetValido_MethodRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "doggie",
									"description": "Updated name of the pet"
								},
								{
									"key": "status",
									"value": "{{statusPet}}",
									"description": "Updated status of the pet"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{idPet}}",
									"description": "(Required) ID of pet that needs to be updated"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "laborum in eiusmod ea",
											"description": "Updated name of the pet"
										},
										{
											"key": "status",
											"value": "ali",
											"description": "Updated status of the pet"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "-26085121",
											"description": "(Required) ID of pet that needs to be updated"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "uploads an image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Upload Imagem PET\", function () {    ",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Upload Imagem PET\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaUploadImagePet\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- ID PET Inexistente -- Upload Imagem PET\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"uploadImagePET_IDInexistente\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- ID PET Inexistente -- Upload Imagem PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bad Request) -- Upload Sem Imagem -- Upload Imagem PET\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"uploadImagePET_SemImagem\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bad Request) -- Upload Sem Imagem -- Upload Imagem PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Upload Imagem PET\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"uploadImagePET_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Upload Imagem PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const animalImage = pm.variables.replaceIn('{{$randomAnimalsImage}}');",
									"pm.collectionVariables.set(\"animalImage\", animalImage);",
									"",
									"const jsonSchemaUploadImagePet = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The code Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The type Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The message Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"code\": 0,",
									"        \"type\": \"string\",",
									"        \"message\": \"string\"",
									"    }]",
									"}",
									"pm.collectionVariables.set(\"jsonSchemaUploadImagePet\", jsonSchemaUploadImagePet);",
									"",
									"const uploadImagePET_IDInexistente = {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet/\"+\"-1\"+\"/uploadImage\",",
									"        header: {",
									"            'Content-Type':'multipart/form-data',",
									"            'Accept': 'application/json',",
									"        },",
									"        body: {",
									"            \"mode\": \"formdata\",",
									"            \"formdata\": [",
									"            {",
									"                \"key\": \"additionalMetadata\",",
									"                \"value\": \"ipsum mollit laboris ut\",",
									"            },",
									"            {",
									"                \"key\": \"file\",",
									"                \"value\": \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRVL_asi1vmCuCcadX46Gea3nrN7D9PBRmRtA&usqp=CAU\",",
									"            },",
									"            ]",
									"        }",
									"};",
									"pm.collectionVariables.set(\"uploadImagePET_IDInexistente\", uploadImagePET_IDInexistente);",
									"",
									"const uploadImagePET_SemImagem = {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet/\"+JSON.stringify(pm.collectionVariables.get(\"idPet\"))+\"/uploadImage\",",
									"        header: {",
									"            'Content-Type':'multipart/form-data',",
									"            'Accept': 'application/json',",
									"        },",
									"        body: {",
									"            \"mode\": \"formdata\",",
									"            \"formdata\": [",
									"            {",
									"                \"key\": \"additionalMetadata\",",
									"                \"value\": \"ipsum mollit laboris ut\",",
									"            },",
									"            ]",
									"        }",
									"};",
									"pm.collectionVariables.set(\"uploadImagePET_SemImagem\", uploadImagePET_SemImagem);",
									"",
									"const METHOD_INV = [\"PATCH\", \"DELETE\", \"GET\", \"PUT\"];",
									"const uploadImagePET_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet/\"+\"-1\"+\"/uploadImage\",",
									"        header: {",
									"            'Content-Type':'multipart/form-data',",
									"            'Accept': 'application/json',",
									"        },",
									"        body: {",
									"            \"mode\": \"formdata\",",
									"            \"formdata\": [",
									"            {",
									"                \"key\": \"additionalMetadata\",",
									"                \"value\": \"ipsum mollit laboris ut\",",
									"            },",
									"            {",
									"                \"key\": \"file\",",
									"                \"value\": \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRVL_asi1vmCuCcadX46Gea3nrN7D9PBRmRtA&usqp=CAU\",",
									"            },",
									"            ]",
									"        }",
									"};",
									"pm.collectionVariables.set(\"uploadImagePET_MethodRandom\", uploadImagePET_MethodRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "additionalMetadata",
									"value": "ipsum mollit laboris ut",
									"description": "Additional data to pass to server",
									"type": "text"
								},
								{
									"key": "file",
									"value": "{{animalImage}}",
									"description": "file to upload",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId/uploadImage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId",
								"uploadImage"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{idPet}}",
									"description": "(Required) ID of pet to update"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "additionalMetadata",
											"value": "ipsum mollit laboris ut",
											"description": "Additional data to pass to server",
											"type": "text"
										},
										{
											"key": "file",
											"description": "file to upload",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/:petId/uploadImage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId",
										"uploadImage"
									],
									"variable": [
										{
											"key": "petId",
											"value": "-26085121",
											"description": "(Required) ID of pet to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 66151012,\n  \"type\": \"Excepteur sed anim\",\n  \"message\": \"in proident velit ex sit\"\n}"
						}
					]
				},
				{
					"name": "Finds Pets by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Find Pet by Status\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Find Pet by Status\", () => {",
									"    var jsonData = pm.response.json();",
									"    var status = jsonData[0].status;",
									"",
									"    if (status == \"pending\"){",
									"        pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaFindStatus\"))).to.be.true;",
									"    }",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- Status Inexistente -- Find Pet by Status\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"buscarStatusPetInexistente\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- Status Inexistente -- Status Code -- Find Pet by Status\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res.id).not.eq(undefined);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found)-- Status Inexistente -- ID não retornado -- Find Pet by Status\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem Status no Path -- Find Pet by Status\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"buscarStatusPetSemStatus\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem Status no Path\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res.id).not.eq(undefined);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Sem Status no Path -- Find Pet by Status\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Find Pet by Status\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"buscarStatusPet_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Find Pet by Status\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const statusPet = [\"available\", \"pending\", \"sold\"];",
									"pm.collectionVariables.set(\"statusPet\", statusPet[Math.floor(Math.random() * statusPet.length)]);",
									"",
									"const buscarStatusPetInexistente = {",
									"        method: 'GET',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet/findByStatus\"+\"?status=nada\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"buscarStatusPetInexistente\", buscarStatusPetInexistente);",
									"",
									"const buscarStatusPetSemStatus = {",
									"        method: 'GET',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet/findByStatus\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"buscarStatusPetSemStatus\", buscarStatusPetSemStatus);",
									"",
									"const jsonSchemaFindStatus = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"array\",",
									"    \"default\": [],",
									"    \"title\": \"Root Schema\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"default\": {},",
									"        \"title\": \"A Schema\",",
									"        \"required\": [",
									"            \"id\",",
									"            \"category\",",
									"            \"name\",",
									"            \"photoUrls\",",
									"            \"tags\",",
									"            \"status\"",
									"        ],",
									"        \"properties\": {",
									"            \"id\": {",
									"                \"type\": \"integer\",",
									"                \"default\": 0,",
									"                \"title\": \"The id Schema\",",
									"                \"examples\": [",
									"                    0",
									"                ]",
									"            },",
									"            \"category\": {",
									"                \"type\": \"object\",",
									"                \"default\": {},",
									"                \"title\": \"The category Schema\",",
									"                \"required\": [",
									"                    \"id\",",
									"                    \"name\"",
									"                ],",
									"                \"properties\": {",
									"                    \"id\": {",
									"                        \"type\": \"integer\",",
									"                        \"default\": 0,",
									"                        \"title\": \"The id Schema\",",
									"                        \"examples\": [",
									"                            0",
									"                        ]",
									"                    },",
									"                    \"name\": {",
									"                        \"type\": \"string\",",
									"                        \"default\": \"\",",
									"                        \"title\": \"The name Schema\",",
									"                        \"examples\": [",
									"                            \"string\"",
									"                        ]",
									"                    }",
									"                },",
									"                \"examples\": [{",
									"                    \"id\": 0,",
									"                    \"name\": \"string\"",
									"                }]",
									"            },",
									"            \"name\": {",
									"                \"type\": \"string\",",
									"                \"default\": \"\",",
									"                \"title\": \"The name Schema\",",
									"                \"examples\": [",
									"                    \"doggie\"",
									"                ]",
									"            },",
									"            \"photoUrls\": {",
									"                \"type\": \"array\",",
									"                \"default\": [],",
									"                \"title\": \"The photoUrls Schema\",",
									"                \"items\": {",
									"                    \"type\": \"string\",",
									"                    \"default\": \"\",",
									"                    \"title\": \"A Schema\",",
									"                    \"examples\": [",
									"                        \"string\"",
									"                    ]",
									"                },",
									"                \"examples\": [",
									"                    [",
									"                        \"string\"]",
									"                ]",
									"            },",
									"            \"tags\": {",
									"                \"type\": \"array\",",
									"                \"default\": [],",
									"                \"title\": \"The tags Schema\",",
									"                \"items\": {",
									"                    \"type\": \"object\",",
									"                    \"default\": {},",
									"                    \"title\": \"A Schema\",",
									"                    \"required\": [",
									"                        \"id\",",
									"                        \"name\"",
									"                    ],",
									"                    \"properties\": {",
									"                        \"id\": {",
									"                            \"type\": \"integer\",",
									"                            \"default\": 0,",
									"                            \"title\": \"The id Schema\",",
									"                            \"examples\": [",
									"                                0",
									"                            ]",
									"                        },",
									"                        \"name\": {",
									"                            \"type\": \"string\",",
									"                            \"default\": \"\",",
									"                            \"title\": \"The name Schema\",",
									"                            \"examples\": [",
									"                                \"string\"",
									"                            ]",
									"                        }",
									"                    },",
									"                    \"examples\": [{",
									"                        \"id\": 0,",
									"                        \"name\": \"string\"",
									"                    }]",
									"                },",
									"                \"examples\": [",
									"                    [{",
									"                        \"id\": 0,",
									"                        \"name\": \"string\"",
									"                    }]",
									"                ]",
									"            },",
									"            \"status\": {",
									"                \"type\": \"string\",",
									"                \"default\": \"\",",
									"                \"title\": \"The status Schema\",",
									"                \"examples\": [",
									"                    \"string\"",
									"                ]",
									"            }",
									"        },",
									"        \"examples\": [{",
									"            \"id\": 0,",
									"            \"category\": {",
									"                \"id\": 0,",
									"                \"name\": \"string\"",
									"            },",
									"            \"name\": \"doggie\",",
									"            \"photoUrls\": [",
									"                \"string\"",
									"            ],",
									"            \"tags\": [{",
									"                \"id\": 0,",
									"                \"name\": \"string\"",
									"            }],",
									"            \"status\": \"string\"",
									"        }]",
									"    },",
									"    \"examples\": [",
									"        [{",
									"            \"id\": 0,",
									"            \"category\": {",
									"                \"id\": 0,",
									"                \"name\": \"string\"",
									"            },",
									"            \"name\": \"doggie\",",
									"            \"photoUrls\": [",
									"                \"string\"",
									"            ],",
									"            \"tags\": [{",
									"                \"id\": 0,",
									"                \"name\": \"string\"",
									"            }],",
									"            \"status\": \"string\"",
									"        }]",
									"    ]",
									"}",
									"pm.collectionVariables.set(\"jsonSchemaFindStatus\", jsonSchemaFindStatus);",
									"",
									"const METHOD_INV = [\"PATCH\", \"DELETE\", \"POST\", \"PUT\"];",
									"const buscarStatusPet_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet/findByStatus\"+\"?status=\"+pm.collectionVariables.get(\"statusPet\"),",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"buscarStatusPet_MethodRandom\", buscarStatusPet_MethodRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status={{statusPet}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "{{statusPet}}",
									"description": "(Required) Status values that need to be considered for filter"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										},
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"labore aliqua ullamco officia\",\n      \"nulla consequat exercitation irure aute\"\n    ],\n    \"id\": -68620936,\n    \"category\": {\n      \"id\": 55403766,\n      \"name\": \"est ut\"\n    },\n    \"tags\": [\n      {\n        \"id\": 63532463,\n        \"name\": \"non sint\"\n      },\n      {\n        \"id\": 5127488,\n        \"name\": \"sint dolor sunt\"\n      }\n    ],\n    \"status\": \"sold\"\n  },\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"mi\",\n      \"est pariatur\"\n    ],\n    \"id\": -55701939,\n    \"category\": {\n      \"id\": -55990521,\n      \"name\": \"m\"\n    },\n    \"tags\": [\n      {\n        \"id\": 10860328,\n        \"name\": \"id et cillum\"\n      },\n      {\n        \"id\": -99907649,\n        \"name\": \"est exercitation amet\"\n      }\n    ],\n    \"status\": \"pending\"\n  }\n]"
						},
						{
							"name": "Invalid status value",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										},
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Find pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Buscar PET by ID\", function () {",
									"    const response = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.status(\"OK\");",
									"    pm.expect(response).to.have.property(\"id\", pm.collectionVariables.get(\"idPet\"));",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Buscar PET by ID\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaFindSbyIDPet\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- ID Inexistente -- Buscar PET by ID\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"buscarPetByIDInexistente\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- ID Inexistente -- Status Code -- Buscar PET by ID\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res.id).not.eq(undefined);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- ID Inexistente -- ID Pet não retornado -- Buscar PET by ID\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 1){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem ID no PATH -- Buscar Pet by ID\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"buscarPetBySemID\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem ID no PATH -- Buscar Pet by ID\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Buscar Pet by ID\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"buscarIDPet_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Buscar Pet by ID\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaFindSbyIDPet = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"category\",",
									"        \"name\",",
									"        \"photoUrls\",",
									"        \"tags\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The id Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"category\": {",
									"            \"type\": \"object\",",
									"            \"default\": {},",
									"            \"title\": \"The category Schema\",",
									"            \"required\": [",
									"                \"id\",",
									"                \"name\"",
									"            ],",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"type\": \"integer\",",
									"                    \"default\": 0,",
									"                    \"title\": \"The id Schema\",",
									"                    \"examples\": [",
									"                        0",
									"                    ]",
									"                },",
									"                \"name\": {",
									"                    \"type\": \"string\",",
									"                    \"default\": \"\",",
									"                    \"title\": \"The name Schema\",",
									"                    \"examples\": [",
									"                        \"string\"",
									"                    ]",
									"                }",
									"            },",
									"            \"examples\": [{",
									"                \"id\": 0,",
									"                \"name\": \"string\"",
									"            }]",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The name Schema\",",
									"            \"examples\": [",
									"                \"doggie\"",
									"            ]",
									"        },",
									"        \"photoUrls\": {",
									"            \"type\": \"array\",",
									"            \"default\": [],",
									"            \"title\": \"The photoUrls Schema\",",
									"            \"items\": {",
									"                \"type\": \"string\",",
									"                \"default\": \"\",",
									"                \"title\": \"A Schema\",",
									"                \"examples\": [",
									"                    \"string\"",
									"                ]",
									"            },",
									"            \"examples\": [",
									"                [",
									"                    \"string\"]",
									"            ]",
									"        },",
									"        \"tags\": {",
									"            \"type\": \"array\",",
									"            \"default\": [],",
									"            \"title\": \"The tags Schema\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"default\": {},",
									"                \"title\": \"A Schema\",",
									"                \"required\": [",
									"                    \"id\",",
									"                    \"name\"",
									"                ],",
									"                \"properties\": {",
									"                    \"id\": {",
									"                        \"type\": \"integer\",",
									"                        \"default\": 0,",
									"                        \"title\": \"The id Schema\",",
									"                        \"examples\": [",
									"                            0",
									"                        ]",
									"                    },",
									"                    \"name\": {",
									"                        \"type\": \"string\",",
									"                        \"default\": \"\",",
									"                        \"title\": \"The name Schema\",",
									"                        \"examples\": [",
									"                            \"string\"",
									"                        ]",
									"                    }",
									"                },",
									"                \"examples\": [{",
									"                    \"id\": 0,",
									"                    \"name\": \"string\"",
									"                }]",
									"            },",
									"            \"examples\": [",
									"                [{",
									"                    \"id\": 0,",
									"                    \"name\": \"string\"",
									"                }]",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The status Schema\",",
									"            \"examples\": [",
									"                \"available\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"id\": 0,",
									"        \"category\": {",
									"            \"id\": 0,",
									"            \"name\": \"string\"",
									"        },",
									"        \"name\": \"doggie\",",
									"        \"photoUrls\": [",
									"            \"string\"",
									"        ],",
									"        \"tags\": [{",
									"            \"id\": 0,",
									"            \"name\": \"string\"",
									"        }],",
									"        \"status\": \"available\"",
									"    }]",
									"}",
									"pm.collectionVariables.set(\"jsonSchemaFindSbyIDPet\", jsonSchemaFindSbyIDPet);",
									"",
									"const buscarPetByIDInexistente = {",
									"        method: 'GET',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet/\"+\"-1\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"buscarPetByIDInexistente\", buscarPetByIDInexistente);",
									"",
									"const METHOD_INV = [\"PATCH\", \"PUT\"];",
									"const buscarIDPet_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet/\"+pm.collectionVariables.get(\"idPet\"),",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"buscarIDPet_MethodRandom\", buscarIDPet_MethodRandom);",
									"",
									"const buscarPetBySemID = {",
									"        method: 'GET',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet/\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"buscarPetBySemID\", buscarPetBySemID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{idPet}}",
									"description": "(Required) ID of pet to return"
								}
							]
						},
						"description": "Returns a single pet"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "-26085121",
											"description": "(Required) ID of pet to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"Ut esse anim\",\n    \"occaecat elit dolore aute\"\n  ],\n  \"id\": 32592151,\n  \"category\": {\n    \"id\": 85080488,\n    \"name\": \"minim eu voluptate officia\"\n  },\n  \"tags\": [\n    {\n      \"id\": 88510630,\n      \"name\": \"quis aliquip esse\"\n    },\n    {\n      \"id\": 43071594,\n      \"name\": \"nisi\"\n    }\n  ],\n  \"status\": \"sold\"\n}"
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "-26085121",
											"description": "(Required) ID of pet to return"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "-26085121",
											"description": "(Required) ID of pet to return"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update an existing pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaUpdatePet = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"category\",",
									"        \"name\",",
									"        \"photoUrls\",",
									"        \"tags\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The id Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"category\": {",
									"            \"type\": \"object\",",
									"            \"default\": {},",
									"            \"title\": \"The category Schema\",",
									"            \"required\": [",
									"                \"id\",",
									"                \"name\"",
									"            ],",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"type\": \"integer\",",
									"                    \"default\": 0,",
									"                    \"title\": \"The id Schema\",",
									"                    \"examples\": [",
									"                        0",
									"                    ]",
									"                },",
									"                \"name\": {",
									"                    \"type\": \"string\",",
									"                    \"default\": \"\",",
									"                    \"title\": \"The name Schema\",",
									"                    \"examples\": [",
									"                        \"string\"",
									"                    ]",
									"                }",
									"            },",
									"            \"examples\": [{",
									"                \"id\": 0,",
									"                \"name\": \"string\"",
									"            }]",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The name Schema\",",
									"            \"examples\": [",
									"                \"doggie\"",
									"            ]",
									"        },",
									"        \"photoUrls\": {",
									"            \"type\": \"array\",",
									"            \"default\": [],",
									"            \"title\": \"The photoUrls Schema\",",
									"            \"items\": {",
									"                \"type\": \"string\",",
									"                \"default\": \"\",",
									"                \"title\": \"A Schema\",",
									"                \"examples\": [",
									"                    \"string\"",
									"                ]",
									"            },",
									"            \"examples\": [",
									"                [",
									"                    \"string\"]",
									"            ]",
									"        },",
									"        \"tags\": {",
									"            \"type\": \"array\",",
									"            \"default\": [],",
									"            \"title\": \"The tags Schema\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"default\": {},",
									"                \"title\": \"A Schema\",",
									"                \"required\": [",
									"                    \"id\",",
									"                    \"name\"",
									"                ],",
									"                \"properties\": {",
									"                    \"id\": {",
									"                        \"type\": \"integer\",",
									"                        \"default\": 0,",
									"                        \"title\": \"The id Schema\",",
									"                        \"examples\": [",
									"                            0",
									"                        ]",
									"                    },",
									"                    \"name\": {",
									"                        \"type\": \"string\",",
									"                        \"default\": \"\",",
									"                        \"title\": \"The name Schema\",",
									"                        \"examples\": [",
									"                            \"string\"",
									"                        ]",
									"                    }",
									"                },",
									"                \"examples\": [{",
									"                    \"id\": 0,",
									"                    \"name\": \"string\"",
									"                }]",
									"            },",
									"            \"examples\": [",
									"                [{",
									"                    \"id\": 0,",
									"                    \"name\": \"string\"",
									"                }]",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The status Schema\",",
									"            \"examples\": [",
									"                \"available\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"id\": 0,",
									"        \"category\": {",
									"            \"id\": 0,",
									"            \"name\": \"string\"",
									"        },",
									"        \"name\": \"doggie\",",
									"        \"photoUrls\": [",
									"            \"string\"",
									"        ],",
									"        \"tags\": [{",
									"            \"id\": 0,",
									"            \"name\": \"string\"",
									"        }],",
									"        \"status\": \"available\"",
									"    }]",
									"}",
									"pm.collectionVariables.set(\"jsonSchemaUpdatePet\", jsonSchemaUpdatePet);",
									"",
									"const updatePetIDInexistente = {",
									"        method: 'PUT',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"                {",
									"            \"id\": -1,",
									"            \"category\": {",
									"                \"id\": -28597499,",
									"                \"name\": \"qui in\"",
									"            },",
									"            \"name\": \"fulano\",",
									"            \"photoUrls\": [",
									"                \"dolore eu\",",
									"                \"Ut exercitation\"",
									"            ],",
									"            \"tags\": [",
									"            {",
									"            \"id\": 8256603,",
									"            \"name\": \"sunt esse\"",
									"            },",
									"            {",
									"            \"id\": 89109961,",
									"            \"name\": \"aute proident non minim sed\"",
									"            }",
									"            ],",
									"            \"status\": pm.collectionVariables.get(\"statusPet\")",
									"                })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"updatePetIDInexistente\", updatePetIDInexistente);",
									"",
									"const METHOD_INV = [\"GET\", \"DELETE\", \"PATCH\"];",
									"const updatePet_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"                {",
									"            \"id\": pm.collectionVariables.get(\"idPet\"),",
									"            \"category\": {",
									"                \"id\": -28597499,",
									"                \"name\": \"qui in\"",
									"            },",
									"            \"name\": \"doggie\",",
									"            \"photoUrls\": [",
									"                \"dolore eu\",",
									"                \"Ut exercitation\"",
									"            ],",
									"            \"tags\": [",
									"            {",
									"            \"id\": 8256603,",
									"            \"name\": \"sunt esse\"",
									"            },",
									"            {",
									"            \"id\": 89109961,",
									"            \"name\": \"aute proident non minim sed\"",
									"            }",
									"            ],",
									"            \"status\": pm.collectionVariables.get(\"statusPet\")",
									"                })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"updatePet_MethodRandom\", updatePet_MethodRandom);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Atualizar PET\", function () {",
									"    var data = JSON.parse(request.data);",
									"    ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json()).to.have.property(\"name\", data.name);",
									"    pm.expect(pm.response.json()).to.have.property(\"status\", pm.collectionVariables.get(\"statusPet\"));",
									"    pm.expect(pm.response.json()).to.have.property(\"id\", pm.collectionVariables.get(\"idPet\"));",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Atualizar PET\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaUpdatePet\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- ID Inexistente --- Atualizar PET\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"updatePetIDInexistente\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- ID Inexistente --- Atualizar PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res.id).not.eq(undefined);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- ID Inexistente -- ID Pet não retornado\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Atualizar PET\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"updatePet_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Atualizar PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"Ut esse anim\",\n    \"occaecat elit dolore aute\"\n  ],\n  \"id\": {{idPet}},\n  \"category\": {\n    \"id\": 85080488,\n    \"name\": \"minim eu voluptate officia\"\n  },\n  \"tags\": [\n    {\n      \"id\": 88510630,\n      \"name\": \"quis aliquip esse\"\n    },\n    {\n      \"id\": 43071594,\n      \"name\": \"nisi\"\n    }\n  ],\n  \"status\": \"{{statusPet}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Validation exception",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Deletes a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) - Deletar PET com dados válidos\", function () {",
									"    ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"idPet\"));",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Deletar PET Store\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaDeletePET\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) --  ID Inexistente -- Deletar PET\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"deleteIDInexistenteDeletePet\"), (err, res) => {",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) --  ID Inexistente -- Deletar PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 1){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- Sem ID no PATH -- Deletar PET\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"deleteIDInvalidoDeletePet\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- Sem ID no PATH -- Deletar PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 1){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Deletar Pet\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"deletarPet_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Deletar PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaDeletePET = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The code Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The type Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The message Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"code\": 0,",
									"        \"type\": \"string\",",
									"        \"message\": \"string\"",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaDeletePET\", jsonSchemaDeletePET);",
									"",
									"const deleteIDInexistenteDeletePet = {",
									"        method: 'DELETE',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet\"+\":-1\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"deleteIDInexistenteDeletePet\", deleteIDInexistenteDeletePet);",
									"",
									"const deleteSemIDDeletePet = {",
									"        method: 'DELETE',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"deleteSemIDDeletePet\", deleteSemIDDeletePet);",
									"",
									"const METHOD_INV = [\"PATCH\", \"PUT\"];",
									"const deletarPet_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet/\"+pm.collectionVariables.get(\"idPet\"),",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"deletarPet_MethodRandom\", deletarPet_MethodRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "proident eu fugiat"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{idPet}}",
									"description": "(Required) Pet id to delete"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"key": "api_key",
										"value": "proident eu fugiat"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "-26085121",
											"description": "(Required) Pet id to delete"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"key": "api_key",
										"value": "proident eu fugiat"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "-26085121",
											"description": "(Required) Pet id to delete"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "store",
			"item": [
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Cadastro Order PET\", function () {",
									"    var data = JSON.parse(request.data);",
									"    ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json()).to.have.property(\"id\", data.id);",
									"    pm.expect(pm.response.json()).to.have.property(\"petId\", pm.collectionVariables.get(\"idPet\"));",
									"    pm.expect(pm.response.json()).to.have.property(\"status\", pm.collectionVariables.get(\"statusOrder\"));",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Cadastro Order PET\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaNewOrder\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 409 (Conflito) -- Cadastro Order PET\", function () {",
									"    pm.sendRequest(pm.collectionVariables.get(\"postDuplicadoNewOrder\"), (err, res) => {",
									"",
									"        let count = 0;",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 409);}catch(e){pm.test(\"Verifica Status Code 409 (Conflito) -- Cadastro Order PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bad Request) -- ID Pet Inválido -- Cadastro Order PET\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postIDInvalidoNewOrder\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bad Request) -- ID Pet Inválido -- Cadastro PET Errado\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem Body -- Cadastro Order PET\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postSemBodyNewOrder\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem Body -- Cadastro Order PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Cadastro Order PET\", function () {",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postNewOrder_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Cadastro Order PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const idOrder = Math.floor((Math.random() * 10000000) + 1);",
									"pm.collectionVariables.set(\"idOrder\", idOrder);",
									"",
									"const statusOrder = [\"placed\", \"unplace\"];",
									"pm.collectionVariables.set(\"statusOrder\", statusOrder[Math.floor(Math.random() * statusOrder.length)]);",
									"",
									"const jsonSchemaNewOrder = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"petId\",",
									"        \"quantity\",",
									"        \"shipDate\",",
									"        \"status\",",
									"        \"complete\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The id Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"petId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The petId Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"quantity\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The quantity Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"shipDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The shipDate Schema\",",
									"            \"examples\": [",
									"                \"2022-09-01T21:17:14.510Z\"",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The status Schema\",",
									"            \"examples\": [",
									"                \"placed\"",
									"            ]",
									"        },",
									"        \"complete\": {",
									"            \"type\": \"boolean\",",
									"            \"default\": false,",
									"            \"title\": \"The complete Schema\",",
									"            \"examples\": [",
									"                true",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"id\": 0,",
									"        \"petId\": 0,",
									"        \"quantity\": 0,",
									"        \"shipDate\": \"2022-09-01T21:17:14.510Z\",",
									"        \"status\": \"placed\",",
									"        \"complete\": true",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaNewOrder\", jsonSchemaNewOrder);",
									"",
									"let randomBoolean = pm.variables.replaceIn(\"{{$randomBoolean}}\")",
									"const postDuplicadoNewOrder = {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/store\"+\"/order\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"            'Accept': 'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"            {",
									"            \"id\": pm.collectionVariables.get(\"idOrder\"),",
									"            \"petId\": pm.collectionVariables.get(\"idPet\"),",
									"            \"quantity\": -50247519,",
									"            \"shipDate\": \"1974-03-20T15:48:39.023Z\",",
									"            \"status\": JSON.stringify(pm.collectionVariables.get(\"statusOrder\")),",
									"            \"complete\": randomBoolean",
									"            })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"postDuplicadoNewOrder\", postDuplicadoNewOrder);",
									"",
									"const postIDInvalidoNewOrder = {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/store\"+\"/order\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"            'Accept': 'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"            {",
									"            \"id\": pm.collectionVariables.get(\"idOrder\"),",
									"            \"petId\": -10,",
									"            \"quantity\": -50247519,",
									"            \"shipDate\": \"1974-03-20T15:48:39.023Z\",",
									"            \"status\": JSON.stringify(pm.collectionVariables.get(\"statusOrder\")),",
									"            \"complete\": randomBoolean",
									"            })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"postIDInvalidoNewOrder\", postIDInvalidoNewOrder);",
									"",
									"const postSemBodyNewOrder = {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/store\"+\"/order\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"            'Accept': 'application/json',",
									"        }",
									"};",
									"pm.collectionVariables.set(\"postSemBodyNewOrder\", postSemBodyNewOrder);",
									"",
									"const METHOD_INV = [\"PATCH\", \"DELETE\", \"GET\", \"PUT\"];",
									"const postNewOrder_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/store\"+\"/order\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"            'Accept': 'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"            {",
									"            \"id\": pm.collectionVariables.get(\"idOrder\"),",
									"            \"petId\": -10,",
									"            \"quantity\": -50247519,",
									"            \"shipDate\": \"1974-03-20T15:48:39.023Z\",",
									"            \"status\": JSON.stringify(pm.collectionVariables.get(\"statusOrder\")),",
									"            \"complete\": randomBoolean",
									"            })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"postNewOrder_MethodRandom\", postNewOrder_MethodRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{idOrder}},\n  \"petId\": {{idPet}},\n  \"quantity\": -50247519,\n  \"shipDate\": \"1974-03-20T15:48:39.023Z\",\n  \"status\": \"{{statusOrder}}\",\n  \"complete\": {{$randomBoolean}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 80536800,\n  \"petId\": 94630354,\n  \"quantity\": -50247519,\n  \"shipDate\": \"1974-03-20T15:48:39.023Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 80536800,\n  \"petId\": 94630354,\n  \"quantity\": -50247519,\n  \"shipDate\": \"1974-03-20T15:48:39.023Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 80536800,\n  \"petId\": 94630354,\n  \"quantity\": -50247519,\n  \"shipDate\": \"1974-03-20T15:48:39.023Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Returns pet inventories by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Retornar Inventário Store\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"totvs\");",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Retornar Inventário Store\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaRetornarInvetarioStore\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Retornar Inventário Store\", function () {",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"retornarInventarioStore_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"VVerifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Retornar Inventário Store\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaRetornarInvetarioStore = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"totvs\",",
									"        \"sold\",",
									"        \"new\",",
									"        \"Sold\",",
									"        \"string\",",
									"        \"unavailable\",",
									"        \"commodo reprehenderi\",",
									"        \"avaliable\",",
									"        \"pending\",",
									"        \"available\",",
									"        \"connector_up\",",
									"        \"ad fugiat\"",
									"    ],",
									"    \"properties\": {",
									"        \"totvs\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The totvs Schema\",",
									"            \"examples\": [",
									"                2",
									"            ]",
									"        },",
									"        \"sold\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The sold Schema\",",
									"            \"examples\": [",
									"                11",
									"            ]",
									"        },",
									"        \"new\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The new Schema\",",
									"            \"examples\": [",
									"                1",
									"            ]",
									"        },",
									"        \"Sold\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The Sold Schema\",",
									"            \"examples\": [",
									"                1",
									"            ]",
									"        },",
									"        \"string\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The string Schema\",",
									"            \"examples\": [",
									"                262",
									"            ]",
									"        },",
									"        \"unavailable\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The unavailable Schema\",",
									"            \"examples\": [",
									"                1",
									"            ]",
									"        },",
									"        \"commodo reprehenderi\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The commodo reprehenderi Schema\",",
									"            \"examples\": [",
									"                1",
									"            ]",
									"        },",
									"        \"avaliable\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The avaliable Schema\",",
									"            \"examples\": [",
									"                3",
									"            ]",
									"        },",
									"        \"pending\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The pending Schema\",",
									"            \"examples\": [",
									"                4",
									"            ]",
									"        },",
									"        \"available\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The available Schema\",",
									"            \"examples\": [",
									"                707",
									"            ]",
									"        },",
									"        \"connector_up\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The connector_up Schema\",",
									"            \"examples\": [",
									"                1",
									"            ]",
									"        },",
									"        \"ad fugiat\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The ad fugiat Schema\",",
									"            \"examples\": [",
									"                1",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"totvs\": 0,",
									"        \"sold\": 0,",
									"        \"new\": 0,",
									"        \"Sold\": 0,",
									"        \"string\": 0,",
									"        \"unavailable\": 0,",
									"        \"commodo reprehenderi\": 0,",
									"        \"avaliable\": 0,",
									"        \"pending\": 0,",
									"        \"available\": 0,",
									"        \"connector_up\": 0,",
									"        \"ad fugiat\": 0",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaRetornarInvetarioStore\", jsonSchemaRetornarInvetarioStore);",
									"",
									"const METHOD_INV = [\"PATCH\", \"DELETE\", \"POST\", \"PUT\"];",
									"const retornarInventarioStore_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/store\"+\"/inventory\",",
									"        header: {",
									"            'Accept':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"retornarInventarioStore_MethodRandom\", retornarInventarioStore_MethodRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						},
						"description": "Returns a map of status codes to quantities"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/store/inventory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"inventory"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"eiusmod5\": 77942021\n}"
						}
					]
				},
				{
					"name": "Find purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Buscar Compra Order by ID Order\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json()).to.have.property(\"id\", pm.collectionVariables.get(\"idOrder\"));",
									"    pm.expect(pm.response.json()).to.have.property(\"petId\", pm.collectionVariables.get(\"idPet\"));",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Buscar Compra Order by ID Order\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaBuscarCompraOrderbyID\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- ID Inexistente -- Buscar Compra Order by ID Order\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"BuscarCompraOrderbyIDInexistente\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found)-- ID Inexistente -- Buscar Compra Order by ID Order\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res.id).not.eq(undefined);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found)-- ID Inexistente -- Buscar Compra Order by ID Order\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 1){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Buscar Compra Order by ID Order\", function () {",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"BuscarCompraOrderbyID_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Buscar Compra Order by ID Order\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bad Request) -- Sem ID no PATH -- Buscar Compra Order by ID Order\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"BuscarCompraOrderSemIDPath\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bad Request) -- Sem ID no PATH -- Buscar Compra Order by ID Order\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaBuscarCompraOrderbyID = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"petId\",",
									"        \"quantity\",",
									"        \"shipDate\",",
									"        \"status\",",
									"        \"complete\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The id Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"petId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The petId Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"quantity\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The quantity Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"shipDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The shipDate Schema\",",
									"            \"examples\": [",
									"                \"2022-09-02T17:21:51.470Z\"",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The status Schema\",",
									"            \"examples\": [",
									"                \"placed\"",
									"            ]",
									"        },",
									"        \"complete\": {",
									"            \"type\": \"boolean\",",
									"            \"default\": false,",
									"            \"title\": \"The complete Schema\",",
									"            \"examples\": [",
									"                true",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"id\": 0,",
									"        \"petId\": 0,",
									"        \"quantity\": 0,",
									"        \"shipDate\": \"2022-09-02T17:21:51.470Z\",",
									"        \"status\": \"placed\",",
									"        \"complete\": true",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaBuscarCompraOrderbyID\", jsonSchemaBuscarCompraOrderbyID);",
									"",
									"const METHOD_INV = [\"PATCH\", \"POST\", \"PUT\"];",
									"const BuscarCompraOrderbyID_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/store\"+\"/order\"+pm.collectionVariables.get(\"idOrder\"),",
									"        header: {",
									"            'Accept':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"BuscarCompraOrderbyID_MethodRandom\", BuscarCompraOrderbyID_MethodRandom);",
									"",
									"const BuscarCompraOrderbyIDInexistente = {",
									"        method: 'GET',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/store\"+\"/order\"+\"-10\",",
									"        header: {",
									"            'Accept':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"BuscarCompraOrderbyIDInexistente\", BuscarCompraOrderbyIDInexistente);",
									"",
									"const BuscarCompraOrderSemIDPath = {",
									"        method: 'GET',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/store\"+\"/order\",",
									"        header: {",
									"            'Accept':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"BuscarCompraOrderSemIDPath\", BuscarCompraOrderSemIDPath);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{idOrder}}",
									"description": "(Required) ID of pet that needs to be fetched"
								}
							]
						},
						"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "4",
											"description": "(Required) ID of pet that needs to be fetched"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 80536800,\n  \"petId\": 94630354,\n  \"quantity\": -50247519,\n  \"shipDate\": \"1974-03-20T15:48:39.023Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}"
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "4",
											"description": "(Required) ID of pet that needs to be fetched"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Order not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "4",
											"description": "(Required) ID of pet that needs to be fetched"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Deletar Order\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", JSON.stringify(pm.collectionVariables.get(\"idOrder\")));",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Deletar Order\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaDeleteOrder\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- Sem ID no Path -- Deletar Order\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"deleteOrderSemID\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- Sem ID no Path -- Deletar Order\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 1){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- ID Inexistente -- Deletar Order\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"deleteOrderIDInexistente\"), (err, res) => {",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- ID Inexistente -- Deletar Order\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 1){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Deletar Order\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"deleteOrder_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Deletar Order\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaDeleteOrder = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The code Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The type Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The message Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"code\": 0,",
									"        \"type\": \"string\",",
									"        \"message\": \"string\"",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaDeleteOrder\", jsonSchemaDeleteOrder);",
									"",
									"const deleteOrderSemID = {",
									"        method: 'DELETE',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/order\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"deleteOrderSemID\", deleteOrderSemID);",
									"",
									"const deleteOrderIDInexistente = {",
									"        method: 'DELETE',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/order\"+\"/-1\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"deleteOrderIDInexistente\", deleteOrderIDInexistente);",
									"",
									"const METHOD_INV = [\"PATCH\", \"PUT\", \"POST\"];",
									"const deleteOrder_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/order/\"+pm.collectionVariables.get(\"idOrder\"),",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"deleteOrder_MethodRandom\", deleteOrder_MethodRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{idOrder}}",
									"description": "(Required) ID of the order that needs to be deleted"
								}
							]
						},
						"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "42006762",
											"description": "(Required) ID of the order that needs to be deleted"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Order not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "42006762",
											"description": "(Required) ID of the order that needs to be deleted"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const idUser = Math.floor((Math.random() * 100) + 1);",
									"pm.collectionVariables.set(\"idUser\", idUser);",
									"",
									"const userName = pm.variables.replaceIn('{{$randomUserName}}');",
									"pm.collectionVariables.set(\"userName\", userName);",
									"",
									"const userFirstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"pm.collectionVariables.set(\"userFirstName\", userFirstName);",
									"",
									"const userLastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"pm.collectionVariables.set(\"userLastName\", userLastName);",
									"",
									"const companyName = pm.variables.replaceIn('{{$randomCompanyName}}');",
									"pm.collectionVariables.set(\"companyName\", companyName);",
									"",
									"const phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);",
									"",
									"const statusUser = [0, 1];",
									"pm.collectionVariables.set(\"statusUser\", statusUser[Math.floor(Math.random() * statusUser.length)]);",
									"",
									"const jsonSchemaNewUser = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The code Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The type Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The message Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"code\": 0,",
									"        \"type\": \"string\",",
									"        \"message\": \"string\"",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaNewUser\", jsonSchemaNewUser);",
									"",
									"const postDuplicadoNewUser = {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"            {",
									"            \"id\": pm.collectionVariables.get(\"idUser\"),",
									"            \"username\": pm.collectionVariables.get(\"userName\"),",
									"            \"firstName\": pm.collectionVariables.get(\"userFirstName\"),",
									"            \"lastName\": pm.collectionVariables.get(\"userLastName\"),",
									"            \"email\": pm.collectionVariables.get(\"companyName\")+\"@tc.com\",",
									"            \"password\": \"dolore eiusmod\",",
									"            \"phone\": pm.collectionVariables.get(\"phoneNumber\"),",
									"            \"userStatus\": pm.collectionVariables.get(\"statusUser\")",
									"            })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"postDuplicadoNewUser\", postDuplicadoNewUser);",
									"",
									"const METHOD_INV = [\"PATCH\", \"DELETE\", \"GET\", \"PUT\"];",
									"const postNewUser_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"            {",
									"            \"id\": pm.collectionVariables.get(\"idUser\"),",
									"            \"username\": pm.collectionVariables.get(\"userName\"),",
									"            \"firstName\": pm.collectionVariables.get(\"userFirstName\"),",
									"            \"lastName\": pm.collectionVariables.get(\"userLastName\"),",
									"            \"email\": pm.collectionVariables.get(\"companyName\")+\"@tc.com\",",
									"            \"password\": \"dolore eiusmod\",",
									"            \"phone\": pm.collectionVariables.get(\"phoneNumber\"),",
									"            \"userStatus\": pm.collectionVariables.get(\"statusUser\")",
									"            })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"postNewUser_MethodRandom\", postNewUser_MethodRandom);",
									"",
									"const postNewUserSemBody = {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"postNewUserSemBody\", postNewUserSemBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Cadastro New User\", function () {",
									"    var data = JSON.parse(request.data);",
									"    ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", JSON.stringify(pm.collectionVariables.get(\"idUser\")));",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Cadastro New User\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaNewUser\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 409 (Conflito) -- Cadastro New User\", function () {",
									"    pm.sendRequest(pm.collectionVariables.get(\"postDuplicadoNewUser\"), (err, res) => {",
									"",
									"        let count = 0;",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 409);}catch(e){pm.test(\"Verifica Status Code 409 (Conflito) -- Cadastro New User\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem Body -- Cadastro New User\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postNewUserSemBody\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem Body -- Cadastro New User\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Cadastro New User\", function () {",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postNewUser_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Cadastro New User\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{idUser}}\",\n  \"username\": \"{{userName}}\",\n  \"firstName\": \"{{userFirstName}}\",\n  \"lastName\": \"{{userLastName}}\",\n  \"email\": \"{{companyName}}@tc.com\",\n  \"password\": \"dolore eiusmod\",\n  \"phone\": \"{{phoneNumber}}\",\n  \"userStatus\": {{statusUser}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -74531651,\n  \"username\": \"est\",\n  \"firstName\": \"in dolore Ut ipsum Duis\",\n  \"lastName\": \"in eiusmod qui dolor\",\n  \"email\": \"Lorem laboris mollit do\",\n  \"password\": \"dolore eiusmod\",\n  \"phone\": \"fugiat qui\",\n  \"userStatus\": -79846806\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Creates list of users with given input array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Cadastro Array of Users\", function () {",
									"    ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Cadastro Array of Users\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaCreateArrayUsers\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem Body -- Cadastro Array of Users\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postCreateArrayUserSemBody\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem Body -- Cadastro Array of Users\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Cadastro Array of Users\", function () {",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postCreateArrayUser_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Cadastro Array of Users\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaCreateArrayUsers = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The code Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The type Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The message Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"code\": 0,",
									"        \"type\": \"string\",",
									"        \"message\": \"string\"",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaCreateArrayUsers\", jsonSchemaCreateArrayUsers);",
									"",
									"const postCreateArrayUserSemBody = {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/createWithArray\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"postCreateArrayUserSemBody\", postCreateArrayUserSemBody);",
									"",
									"const METHOD_INV = [\"PATCH\", \"DELETE\", \"GET\", \"PUT\"];",
									"const postCreateArrayUser_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/createWithArray\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"            {",
									"            \"id\": pm.collectionVariables.get(\"idUser\"),",
									"            \"username\": pm.collectionVariables.get(\"userName\"),",
									"            \"firstName\": pm.collectionVariables.get(\"userFirstName\"),",
									"            \"lastName\": pm.collectionVariables.get(\"userLastName\"),",
									"            \"email\": pm.collectionVariables.get(\"companyName\")+\"@tc.com\",",
									"            \"password\": \"dolore eiusmod\",",
									"            \"phone\": pm.collectionVariables.get(\"phoneNumber\"),",
									"            \"userStatus\": pm.collectionVariables.get(\"statusUser\")",
									"            },",
									"            {",
									"            \"id\": pm.collectionVariables.get(\"idUser\"),",
									"            \"username\": pm.collectionVariables.get(\"userName\"),",
									"            \"firstName\": pm.collectionVariables.get(\"userFirstName\"),",
									"            \"lastName\": pm.collectionVariables.get(\"userLastName\"),",
									"            \"email\": pm.collectionVariables.get(\"companyName\")+\"@tc.com\",",
									"            \"password\": \"dolore eiusmod\",",
									"            \"phone\": pm.collectionVariables.get(\"phoneNumber\"),",
									"            \"userStatus\": pm.collectionVariables.get(\"statusUser\")",
									"            })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"postCreateArrayUser_MethodRandom\", postCreateArrayUser_MethodRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n  \"id\": \"{{idUser}}\",\n  \"username\": \"{{userName}}\",\n  \"firstName\": \"{{userFirstName}}\",\n  \"lastName\": \"{{userLastName}}\",\n  \"email\": \"{{companyName}}@tc.com\",\n  \"password\": \"dolore eiusmod\",\n  \"phone\": \"{{phoneNumber}}\",\n  \"userStatus\": {{statusUser}}\n  },\n  {\n  \"id\": \"{{idUser}}\",\n  \"username\": \"{{userName}}\",\n  \"firstName\": \"{{userFirstName}}\",\n  \"lastName\": \"{{userLastName}}\",\n  \"email\": \"{{companyName}}@tc.com\",\n  \"password\": \"dolore eiusmod\",\n  \"phone\": \"{{phoneNumber}}\",\n  \"userStatus\": {{statusUser}}\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithArray",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/createWithArray",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithArray"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Creates list of users with given input array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Cadastro List of Users\", function () {",
									"    ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Cadastro List of Users\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaCreateListUsers\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem Body -- Cadastro List of Users\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postCreateListUserSemBody\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem Body -- Cadastro List of Users\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Cadastro List of Users\", function () {",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postCreateListUser_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Cadastro List of Users\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaCreateListUsers = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The code Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The type Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The message Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"code\": 0,",
									"        \"type\": \"string\",",
									"        \"message\": \"string\"",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaCreateListUsers\", jsonSchemaCreateListUsers);",
									"",
									"const METHOD_INV = [\"PATCH\", \"DELETE\", \"GET\", \"PUT\"];",
									"const postCreateListUser_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/createWithList\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"            {",
									"            \"id\": pm.collectionVariables.get(\"idUser\"),",
									"            \"username\": pm.collectionVariables.get(\"userName\"),",
									"            \"firstName\": pm.collectionVariables.get(\"userFirstName\"),",
									"            \"lastName\": pm.collectionVariables.get(\"userLastName\"),",
									"            \"email\": pm.collectionVariables.get(\"companyName\")+\"@tc.com\",",
									"            \"password\": \"dolore eiusmod\",",
									"            \"phone\": pm.collectionVariables.get(\"phoneNumber\"),",
									"            \"userStatus\": pm.collectionVariables.get(\"statusUser\")",
									"            },",
									"            {",
									"            \"id\": pm.collectionVariables.get(\"idUser\"),",
									"            \"username\": pm.collectionVariables.get(\"userName\"),",
									"            \"firstName\": pm.collectionVariables.get(\"userFirstName\"),",
									"            \"lastName\": pm.collectionVariables.get(\"userLastName\"),",
									"            \"email\": pm.collectionVariables.get(\"companyName\")+\"@tc.com\",",
									"            \"password\": \"dolore eiusmod\",",
									"            \"phone\": pm.collectionVariables.get(\"phoneNumber\"),",
									"            \"userStatus\": pm.collectionVariables.get(\"statusUser\")",
									"            })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"postCreateListUser_MethodRandom\", postCreateListUser_MethodRandom);",
									"",
									"const postCreateListUserSemBody = {",
									"        method: 'POST',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/createWithList\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"postCreateListUserSemBody\", postCreateListUserSemBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n  \"id\": \"{{idUser}}\",\n  \"username\": \"{{userName}}\",\n  \"firstName\": \"{{userFirstName}}\",\n  \"lastName\": \"{{userLastName}}\",\n  \"email\": \"{{companyName}}@tc.com\",\n  \"password\": \"dolore eiusmod\",\n  \"phone\": \"{{phoneNumber}}\",\n  \"userStatus\": {{statusUser}}\n  },\n  {\n  \"id\": \"{{idUser}}\",\n  \"username\": \"{{userName}}\",\n  \"firstName\": \"{{userFirstName}}\",\n  \"lastName\": \"{{userLastName}}\",\n  \"email\": \"{{companyName}}@tc.com\",\n  \"password\": \"dolore eiusmod\",\n  \"phone\": \"{{phoneNumber}}\",\n  \"userStatus\": {{statusUser}}\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithList",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/createWithList",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithList"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get user by user name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaGetUserByUsername = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"id\",",
									"        \"username\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"password\",",
									"        \"phone\",",
									"        \"userStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The id Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"username\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The username Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"firstName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The firstName Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"lastName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The lastName Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"email\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The email Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"password\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The password Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"phone\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The phone Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"userStatus\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The userStatus Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"id\": 0,",
									"        \"username\": \"string\",",
									"        \"firstName\": \"string\",",
									"        \"lastName\": \"string\",",
									"        \"email\": \"string\",",
									"        \"password\": \"string\",",
									"        \"phone\": \"string\",",
									"        \"userStatus\": 0",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaGetUserByUsername\", jsonSchemaGetUserByUsername);",
									"",
									"const METHOD_INV = [\"PATCH\", \"POST\"];",
									"const retornarUserByUserName_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/\"+pm.collectionVariables.get(\"userName\"),",
									"        header: {",
									"            'Accept':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"retornarUserByUserName_MethodRandom\", retornarUserByUserName_MethodRandom);",
									"",
									"const retornarUserByUserName_UserNameInexistente = {",
									"        method: 'GET',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user\"+\"misael\",",
									"        header: {",
									"            'Accept':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"retornarUserByUserName_UserNameInexistente\", retornarUserByUserName_UserNameInexistente);",
									"",
									"const retornarUserByUserName_SemUserNamePATH = {",
									"        method: 'GET',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/\",",
									"        header: {",
									"            'Accept':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"retornarUserByUserName_SemUserNamePATH\", retornarUserByUserName_SemUserNamePATH);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Retornar Usuário por Username\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json()).to.have.property(\"id\", pm.collectionVariables.get(\"idUser\"));",
									"    pm.expect(pm.response.json()).to.have.property(\"username\", pm.collectionVariables.get(\"userName\"));",
									"    pm.expect(pm.response.json()).to.have.property(\"firstName\", pm.collectionVariables.get(\"userFirstName\"));",
									"    pm.expect(pm.response.json()).to.have.property(\"lastName\", pm.collectionVariables.get(\"userLastName\"));",
									"    pm.expect(pm.response.json()).to.have.property(\"phone\", pm.collectionVariables.get(\"phoneNumber\"));",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Retornar Usuário por Username\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaGetUserByUsername\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- Username Inexistente -- Retornar Usuário por Username\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"retornarUserByUserName_UserNameInexistente\"), (err, res) => {",
									"        ",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- Username Inexistente -- Retornar Usuário por Username\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res.id).not.eq(undefined);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- Username Inexistente -- Retornar Usuário por Username\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 1){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem UserName no PATH -- Retornar Usuário por Username\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"BuscarCompraOrderSemIDPath\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem UserName no PATH -- Retornar Usuário por Username\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Retornar Usuário por Username\", function () {",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"retornarUserByUserName_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Retornar Inventário Store\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "{{userName}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "proident eu fugiat",
											"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -74531651,\n  \"username\": \"est\",\n  \"firstName\": \"in dolore Ut ipsum Duis\",\n  \"lastName\": \"in eiusmod qui dolor\",\n  \"email\": \"Lorem laboris mollit do\",\n  \"password\": \"dolore eiusmod\",\n  \"phone\": \"fugiat qui\",\n  \"userStatus\": -79846806\n}"
						},
						{
							"name": "Invalid username supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "proident eu fugiat",
											"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "proident eu fugiat",
											"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Logs user into the system",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Logs User\", function () {",
									"    ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"logged in user session\");",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Logs User\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaLogsUser\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- Username Inválido -- Logs User\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"retornarLogsUser_UserNameInvalido\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- Username Inválido -- Logs User\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 1){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem UserName no PATH -- Logs User\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"retornarLogsUser_SemUserNamePath\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 400);}catch(e){pm.test(\"Verifica Status Code 400 (Bady Request) -- Sem UserName no PATH -- Logs User\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Logs User\", function () {",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"retornarLogsUser_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Logs User\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaLogsUser = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The code Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The type Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The message Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"code\": 0,",
									"        \"type\": \"string\",",
									"        \"message\": \"string\"",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaLogsUser\", jsonSchemaLogsUser);",
									"",
									"const userPassword= pm.variables.replaceIn('{{$randomPassword}}');",
									"const retornarLogsUser_UserNameInvalido = {",
									"        method: 'GET',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/login?\"+\"username=misa\"+\"&\"+\"password=\"+userPassword,",
									"        header: {",
									"            'Accept':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"retornarLogsUser_UserNameInvalido\", retornarLogsUser_UserNameInvalido);",
									"",
									"const retornarLogsUser_SemUserNamePath = {",
									"        method: 'GET',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/login?\"+\"password=\"+userPassword,",
									"        header: {",
									"            'Accept':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"retornarLogsUser_SemUserNamePath\", retornarLogsUser_SemUserNamePath);",
									"",
									"const METHOD_INV = [\"PATCH\", \"POST\", \"PUT\", \"DELETE\"];",
									"const retornarLogsUser_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/login?\"+\"password=\"+userPassword,",
									"        header: {",
									"            'Accept':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"retornarLogsUser_MethodRandom\", retornarLogsUser_MethodRandom);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/login?username={{userName}}&password={{$randomPassword}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{userName}}",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "{{$randomPassword}}",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=proident eu fugiat&password=proident eu fugiat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "proident eu fugiat"
										},
										{
											"key": "password",
											"value": "proident eu fugiat"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Expires-After",
									"value": "2015-05-31T12:31:40.321Z",
									"description": "date in UTC when token expires"
								},
								{
									"key": "X-Rate-Limit",
									"value": "96839532",
									"description": "calls per hour allowed by the user"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"proident eu fugiat\""
						},
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=proident eu fugiat&password=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "proident eu fugiat"
										},
										{
											"key": "password",
											"value": ""
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Logs user into the system",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=proident eu fug&password=proident eu fugiat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "proident eu fug",
											"description": "(Required) The user name for login"
										},
										{
											"key": "password",
											"value": "proident eu fugiat",
											"description": "(Required) The password for login in clear text"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 10 Aug 2022 17:15:21 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "X-Expires-After",
									"value": "Wed Aug 10 18:15:21 UTC 2022"
								},
								{
									"key": "X-Rate-Limit",
									"value": "5000"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								},
								{
									"key": "Content-Length",
									"value": "78"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"type\": \"unknown\",\n    \"message\": \"logged in user session:1660151721274\"\n}"
						}
					]
				},
				{
					"name": "Logs out current logged in user session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Logsout User\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"ok\");",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Logsout User\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaLogsoutUser\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Logsout User\", function () {",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"retornarLogsoutUser_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Logs out User\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaLogsoutUser = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The code Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The type Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The message Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"code\": 0,",
									"        \"type\": \"string\",",
									"        \"message\": \"string\"",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaLogsoutUser\", jsonSchemaLogsoutUser);",
									"",
									"const METHOD_INV = [\"PATCH\", \"POST\", \"PUT\", \"DELETE\"];",
									"const retornarLogsoutUser_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/logout\",",
									"        header: {",
									"            'Accept':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"retornarLogsoutUser_MethodRandom\", retornarLogsoutUser_MethodRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Updated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Atualizar User\", function () {",
									"    var data = JSON.parse(request.data);",
									"    ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", JSON.stringify(pm.collectionVariables.get(\"idUser\")));",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Atualizar User\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaUpdateUser\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- Username Inexistente --- Atualizar User\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"postDuplicadoUpdateUser\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- Username Inexistente -- Atualizar User\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res.id).not.eq(undefined);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) -- ID User não retornado -- Atualizar User\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Atualizar User\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"updateUser_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Atualizar PET\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaUpdateUser = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The code Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The type Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The message Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"code\": 0,",
									"        \"type\": \"string\",",
									"        \"message\": \"string\"",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaUpdateUser\", jsonSchemaUpdateUser);",
									"",
									"const postDuplicadoUpdateUser = {",
									"        method: 'PUT',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/:\"+pm.collectionVariables.get(\"userName\"),",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"            {",
									"            \"id\": pm.collectionVariables.get(\"idUser\"),",
									"            \"username\": pm.collectionVariables.get(\"userName\"),",
									"            \"firstName\": pm.collectionVariables.get(\"userFirstName\"),",
									"            \"lastName\": pm.collectionVariables.get(\"userLastName\"),",
									"            \"email\": pm.collectionVariables.get(\"companyName\")+\"@tc.com\",",
									"            \"password\": \"dolore eiusmod\",",
									"            \"phone\": pm.collectionVariables.get(\"phoneNumber\"),",
									"            \"userStatus\": pm.collectionVariables.get(\"statusUser\")",
									"            })",
									"        }",
									"        ",
									"};",
									"pm.collectionVariables.set(\"postDuplicadoUpdateUser\", postDuplicadoUpdateUser);",
									"",
									"const METHOD_INV = [\"POST\", \"PATCH\"];",
									"const updateUser_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/:\"+pm.collectionVariables.get(\"userName\"),",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"        body:{",
									"            mode : 'application/json',",
									"            raw: JSON.stringify(",
									"            {",
									"            \"id\": pm.collectionVariables.get(\"idUser\"),",
									"            \"username\": pm.collectionVariables.get(\"userName\"),",
									"            \"firstName\": pm.collectionVariables.get(\"userFirstName\"),",
									"            \"lastName\": pm.collectionVariables.get(\"userLastName\"),",
									"            \"email\": pm.collectionVariables.get(\"companyName\")+\"@tc.com\",",
									"            \"password\": \"dolore eiusmodgyn\",",
									"            \"phone\": pm.collectionVariables.get(\"phoneNumber\"),",
									"            \"userStatus\": pm.collectionVariables.get(\"statusUser\")",
									"            })",
									"        }",
									"};",
									"pm.collectionVariables.set(\"updateUser_MethodRandom\", updateUser_MethodRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{idUser}}\",\n  \"username\": \"{{userName}}\",\n  \"firstName\": \"{{randomCity}}\",\n  \"lastName\": \"in eiusmod qui dolor\",\n  \"email\": \"{{$randomCompanyName}}@tc.com\",\n  \"password\": \"dolore eiusmod\",\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"userStatus\": {{statusUser}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "{{userName}}",
									"description": "(Required) name that need to be updated"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "Invalid user supplied",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -74531651,\n  \"username\": \"est\",\n  \"firstName\": \"in dolore Ut ipsum Duis\",\n  \"lastName\": \"in eiusmod qui dolor\",\n  \"email\": \"Lorem laboris mollit do\",\n  \"password\": \"dolore eiusmod\",\n  \"phone\": \"fugiat qui\",\n  \"userStatus\": -79846806\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "proident eu fugiat",
											"description": "(Required) name that need to be updated"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -74531651,\n  \"username\": \"est\",\n  \"firstName\": \"in dolore Ut ipsum Duis\",\n  \"lastName\": \"in eiusmod qui dolor\",\n  \"email\": \"Lorem laboris mollit do\",\n  \"password\": \"dolore eiusmod\",\n  \"phone\": \"fugiat qui\",\n  \"userStatus\": -79846806\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "proident eu fugiat",
											"description": "(Required) name that need to be updated"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica Status Code 200 (Sucesso) -- Deletar User\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"userName\"));",
									"});",
									"",
									"pm.test(\"Valida contrato (jsonSchema) -- Deletar User\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(jsonData, pm.collectionVariables.get(\"jsonSchemaDeleteUser\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Verifica Status Code 404 (Not Found) -- Username Inválido -- Deletar User\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"deleteUserInvalidoUserName\"), (err, res) => {",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 404);}catch(e){pm.test(\"Verifica Status Code 404 (Not Found) --  Username Inválido -- Deletar User\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 1){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Deletar User\", function () {",
									"",
									"    let count = 0;",
									"",
									"    pm.sendRequest(pm.collectionVariables.get(\"deletarUser_MethodRandom\"), (err, res) => {",
									"",
									"        try{pm.expect(err).to.not.be.ok;}catch(e){pm.test(\"Confirmar que houve erro\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        try{pm.expect(res).to.have.property('code', 405);}catch(e){pm.test(\"Verifica Status Code 405 (Method Not Allowed) -- Método Inválido -- Deletar User\", () => {throw new Error(e.message)}), count ++};",
									"",
									"        if (count > 2){",
									"            pm.expect.fail(\"Houveram \" + count + \" falhas.\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonSchemaDeleteUser = {",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"code\",",
									"        \"type\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The code Schema\",",
									"            \"examples\": [",
									"                0",
									"            ]",
									"        },",
									"        \"type\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The type Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The message Schema\",",
									"            \"examples\": [",
									"                \"string\"",
									"            ]",
									"        }",
									"    },",
									"    \"examples\": [{",
									"        \"code\": 0,",
									"        \"type\": \"string\",",
									"        \"message\": \"string\"",
									"    }]",
									"};",
									"pm.collectionVariables.set(\"jsonSchemaDeleteUser\", jsonSchemaDeleteUser);",
									"",
									"const deleteUserInvalidoUserName = {",
									"        method: 'DELETE',",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/pet\"+\":-1\",",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"deleteUserInvalidoUserName\", deleteUserInvalidoUserName);",
									"",
									"const METHOD_INV = [\"PATCH\", \"POST\"];",
									"const deletarUser_MethodRandom = {",
									"        method: METHOD_INV[Math.floor(Math.random() * METHOD_INV.length)],",
									"        url: pm.collectionVariables.get(\"baseUrl\")+\"/user/:\"+pm.collectionVariables.get(\"userName\"),",
									"        header: {",
									"            'Content-Type':'application/json',",
									"        },",
									"};",
									"pm.collectionVariables.set(\"deletarUser_MethodRandom\", deletarUser_MethodRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "{{userName}}",
									"description": "(Required) The name that needs to be deleted"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "Invalid username supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "proident eu fugiat",
											"description": "(Required) The name that needs to be deleted"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "proident eu fugiat",
											"description": "(Required) The name that needs to be deleted"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		},
		{
			"key": "idUserValido",
			"value": "-74531651",
			"type": "string"
		},
		{
			"key": "idPet",
			"value": ""
		},
		{
			"key": "statusPet",
			"value": ""
		},
		{
			"key": "postOTP",
			"value": ""
		},
		{
			"key": "postDuplicado",
			"value": ""
		},
		{
			"key": "postIDInvalido",
			"value": ""
		},
		{
			"key": "postBodyVazio",
			"value": ""
		},
		{
			"key": "atualizaIDPetInvalido",
			"value": ""
		},
		{
			"key": "atualizaStatusPetInexistente",
			"value": ""
		},
		{
			"key": "atualizaStatusPetSemStatus",
			"value": ""
		},
		{
			"key": "jsonSchema",
			"value": ""
		},
		{
			"key": "jsonSchemaNewPet",
			"value": ""
		},
		{
			"key": "jsonSchemaUpdateNewPetStore",
			"value": ""
		},
		{
			"key": "postDuplicadoNewPet",
			"value": ""
		},
		{
			"key": "postIDInvalidoNewPet",
			"value": ""
		},
		{
			"key": "postBodyVazioNewPet",
			"value": ""
		},
		{
			"key": "jsonSchemaFindStatus",
			"value": ""
		},
		{
			"key": "deleteIDInvalidoDeletePet",
			"value": ""
		},
		{
			"key": "deleteSemIDDeletePet",
			"value": ""
		},
		{
			"key": "atualizaIDPetValido_MethodRandom",
			"value": ""
		},
		{
			"key": "METHOD_INV_NewPet",
			"value": ""
		},
		{
			"key": "METHOD_INV_UpPet",
			"value": ""
		},
		{
			"key": "postVALIDONewPet_MethodRandom",
			"value": ""
		},
		{
			"key": "jsonSchemaUploadImagePet",
			"value": ""
		},
		{
			"key": "uploadImagePET_IDInvalido",
			"value": ""
		},
		{
			"key": "uploadImagePET_SemImagem",
			"value": ""
		},
		{
			"key": "jsonSchemaFindSbyIDPet",
			"value": ""
		},
		{
			"key": "buscarStatusPetInexistente",
			"value": ""
		},
		{
			"key": "buscarStatusPetSemStatus",
			"value": ""
		},
		{
			"key": "buscarStatusPet_MethodRandom",
			"value": ""
		},
		{
			"key": "buscarPetByIDInexistente",
			"value": ""
		},
		{
			"key": "buscarIDPet_MethodRandom",
			"value": ""
		},
		{
			"key": "buscarPetBySemID",
			"value": ""
		},
		{
			"key": "jsonSchemaUpdatePet",
			"value": ""
		},
		{
			"key": "jsonSchemaDeletePET",
			"value": ""
		},
		{
			"key": "deletarPet_MethodRandom",
			"value": ""
		},
		{
			"key": "uploadImagePET_MethodRandom",
			"value": ""
		},
		{
			"key": "updatePet_MethodRandom",
			"value": ""
		},
		{
			"key": "updatePetIDInexistente",
			"value": ""
		},
		{
			"key": "updatePetPetInexistente",
			"value": ""
		},
		{
			"key": "idStore",
			"value": ""
		},
		{
			"key": "statusStore",
			"value": ""
		},
		{
			"key": "idOrder",
			"value": ""
		},
		{
			"key": "statusOrder",
			"value": ""
		},
		{
			"key": "jsonSchemaNewOrder",
			"value": ""
		},
		{
			"key": "postDuplicadoNewOrder",
			"value": ""
		},
		{
			"key": "postIDInvalidoNewOrder",
			"value": ""
		},
		{
			"key": "postSemBodyNewOrder",
			"value": ""
		},
		{
			"key": "jsonSchemaRetornarInvetarioStore",
			"value": ""
		},
		{
			"key": "retornarInventarioStore_MethodRandom",
			"value": ""
		},
		{
			"key": "postNewOrder_MethodRandom",
			"value": ""
		},
		{
			"key": "jsonSchemaBuscarCompraOrderbyID",
			"value": ""
		},
		{
			"key": "BuscarCompraOrderbyID_MethodRandom",
			"value": ""
		},
		{
			"key": "BuscarCompraOrderbyIDInexistente",
			"value": ""
		},
		{
			"key": "BuscarCompraOrderSemIDPath",
			"value": ""
		},
		{
			"key": "deleteOrderSemID",
			"value": ""
		},
		{
			"key": "deleteOrderIDInvalido",
			"value": ""
		},
		{
			"key": "deleteOrder_MethodRandom",
			"value": ""
		},
		{
			"key": "idUser",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "jsonSchemaNewUser",
			"value": ""
		},
		{
			"key": "postDuplicadoNewUser",
			"value": ""
		},
		{
			"key": "jsonSchemaGetUserByUsername",
			"value": ""
		},
		{
			"key": "retornarUserByUserName_MethodRandom",
			"value": ""
		},
		{
			"key": "retornarUserByUserName_UserNameInvalido",
			"value": ""
		},
		{
			"key": "retornarUserByUserName_SemUserNamePATH",
			"value": ""
		},
		{
			"key": "statusUser",
			"value": ""
		},
		{
			"key": "jsonSchemaUpdateUser",
			"value": ""
		},
		{
			"key": "postDuplicadoUpdateUser",
			"value": ""
		},
		{
			"key": "updateUser_MethodRandom",
			"value": ""
		},
		{
			"key": "jsonSchemaDeleteOrder",
			"value": ""
		},
		{
			"key": "jsonSchemaDeleteUser",
			"value": ""
		},
		{
			"key": "deleteUserInvalidoUserName",
			"value": ""
		},
		{
			"key": "deletarUser_MethodRandom",
			"value": ""
		},
		{
			"key": "jsonSchemaLogsUser",
			"value": ""
		},
		{
			"key": "retornarLogsUser_UserNameInvalido",
			"value": ""
		},
		{
			"key": "retornarLogsUser_SemUserNamePath",
			"value": ""
		},
		{
			"key": "retornarLogsUser_MethodRandom",
			"value": ""
		},
		{
			"key": "jsonSchemaLogsoutUser",
			"value": ""
		},
		{
			"key": "retornarLogsoutUser_MethodRandom",
			"value": ""
		},
		{
			"key": "userFirstName",
			"value": ""
		},
		{
			"key": "userLastName",
			"value": ""
		},
		{
			"key": "companyName",
			"value": ""
		},
		{
			"key": "phoneNumber",
			"value": ""
		},
		{
			"key": "animalImage",
			"value": ""
		},
		{
			"key": "jsonSchemaCreateListUsers",
			"value": ""
		},
		{
			"key": "postNewUser_MethodRandom",
			"value": ""
		},
		{
			"key": "postNewUserSemBody",
			"value": ""
		},
		{
			"key": "postCreateListUserSemBody",
			"value": ""
		},
		{
			"key": "jsonSchemaCreateArrayUsers",
			"value": ""
		},
		{
			"key": "postCreateArrayUserSemBody",
			"value": ""
		},
		{
			"key": "postCreateArrayUser_MethodRandom",
			"value": ""
		},
		{
			"key": "postCreateListUser_MethodRandom",
			"value": ""
		},
		{
			"key": "atualizaIDPetInexistente",
			"value": ""
		},
		{
			"key": "uploadImagePET_IDInexistente",
			"value": ""
		},
		{
			"key": "deleteIDInexistenteDeletePet",
			"value": ""
		},
		{
			"key": "deleteOrderIDInexistente",
			"value": ""
		},
		{
			"key": "retornarUserByUserName_UserNameInexistente",
			"value": ""
		}
	]
}